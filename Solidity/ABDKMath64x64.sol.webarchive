bplist00Ñ_WebMainResourceÕ	
_WebResourceData_WebResourceMIMEType_WebResourceTextEncodingName^WebResourceURL_WebResourceFrameNameObÈ<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 * ABDK Math 64.64 Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.
 * Author: Mikhail Vladimirov &lt;mikhail.vladimirov@gmail.com&gt;
 */
pragma solidity ^0.5.7;

/**
 * Smart contract library of mathematical functions operating with signed
 * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is
 * basically a simple fraction whose numerator is signed 128-bit integer and
 * denominator is 2^64.  As long as denominator is always the same, there is no
 * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are
 * represented by int128 type holding only the numerator.
 */
library ABDKMath64x64 {
  /**
   * Minimum value signed 64.64-bit fixed point number may have. 
   */
  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;

  /**
   * Maximum value signed 64.64-bit fixed point number may have. 
   */
  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;

  /**
   * Convert signed 256-bit integer number into signed 64.64-bit fixed point
   * number.  Revert on overflow.
   *
   * @param x signed 256-bit integer number
   * @return signed 64.64-bit fixed point number
   */
  function fromInt (int256 x) internal pure returns (int128) {
    require (x &gt;= -0x8000000000000000 &amp;&amp; x &lt;= 0x7FFFFFFFFFFFFFFF);
    return int128 (x &lt;&lt; 64);
  }

  /**
   * Convert signed 64.64 fixed point number into signed 64-bit integer number
   * rounding down.
   *
   * @param x signed 64.64-bit fixed point number
   * @return signed 64-bit integer number
   */
  function toInt (int128 x) internal pure returns (int64) {
    return int64 (x &gt;&gt; 64);
  }

  /**
   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point
   * number.  Revert on overflow.
   *
   * @param x unsigned 256-bit integer number
   * @return signed 64.64-bit fixed point number
   */
  function fromUInt (uint256 x) internal pure returns (int128) {
    require (x &lt;= 0x7FFFFFFFFFFFFFFF);
    return int128 (x &lt;&lt; 64);
  }

  /**
   * Convert signed 64.64 fixed point number into unsigned 64-bit integer
   * number rounding down.  Revert on underflow.
   *
   * @param x signed 64.64-bit fixed point number
   * @return unsigned 64-bit integer number
   */
  function toUInt (int128 x) internal pure returns (uint64) {
    require (x &gt;= 0);
    return uint64 (x &gt;&gt; 64);
  }

  /**
   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point
   * number rounding down.  Revert on overflow.
   *
   * @param x signed 128.128-bin fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function from128x128 (int256 x) internal pure returns (int128) {
    int256 result = x &gt;&gt; 64;
    require (result &gt;= MIN_64x64 &amp;&amp; result &lt;= MAX_64x64);
    return int128 (result);
  }

  /**
   * Convert signed 64.64 fixed point number into signed 128.128 fixed point
   * number.
   *
   * @param x signed 64.64-bit fixed point number
   * @return signed 128.128 fixed point number
   */
  function to128x128 (int128 x) internal pure returns (int256) {
    return int256 (x) &lt;&lt; 64;
  }

  /**
   * Calculate x + y.  Revert on overflow.
   *
   * @param x signed 64.64-bit fixed point number
   * @param y signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function add (int128 x, int128 y) internal pure returns (int128) {
    int256 result = int256(x) + y;
    require (result &gt;= MIN_64x64 &amp;&amp; result &lt;= MAX_64x64);
    return int128 (result);
  }

  /**
   * Calculate x - y.  Revert on overflow.
   *
   * @param x signed 64.64-bit fixed point number
   * @param y signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function sub (int128 x, int128 y) internal pure returns (int128) {
    int256 result = int256(x) - y;
    require (result &gt;= MIN_64x64 &amp;&amp; result &lt;= MAX_64x64);
    return int128 (result);
  }

  /**
   * Calculate x * y rounding down.  Revert on overflow.
   *
   * @param x signed 64.64-bit fixed point number
   * @param y signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function mul (int128 x, int128 y) internal pure returns (int128) {
    int256 result = int256(x) * y &gt;&gt; 64;
    require (result &gt;= MIN_64x64 &amp;&amp; result &lt;= MAX_64x64);
    return int128 (result);
  }

  /**
   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point
   * number and y is signed 256-bit integer number.  Revert on overflow.
   *
   * @param x signed 64.64 fixed point number
   * @param y signed 256-bit integer number
   * @return signed 256-bit integer number
   */
  function muli (int128 x, int256 y) internal pure returns (int256) {
    if (x == MIN_64x64) {
      require (y &gt;= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &amp;&amp;
        y &lt;= 0x1000000000000000000000000000000000000000000000000);
      return -y &lt;&lt; 63;
    } else {
      bool negativeResult = false;
      if (x &lt; 0) {
        x = -x;
        negativeResult = true;
      }
      if (y &lt; 0) {
        y = -y; // We rely on overflow behavior here
        negativeResult = !negativeResult;
      }
      uint256 absoluteResult = mulu (x, uint256 (y));
      if (negativeResult) {
        require (absoluteResult &lt;=
          0x8000000000000000000000000000000000000000000000000000000000000000);
        return -int256 (absoluteResult); // We rely on overflow behavior here
      } else {
        require (absoluteResult &lt;=
          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
        return int256 (absoluteResult);
      }
    }
  }

  /**
   * Calculate x * y rounding down, where x is signed 64.64 fixed point number
   * and y is unsigned 256-bit integer number.  Revert on overflow.
   *
   * @param x signed 64.64 fixed point number
   * @param y unsigned 256-bit integer number
   * @return unsigned 256-bit integer number
   */
  function mulu (int128 x, uint256 y) internal pure returns (uint256) {
    if (y == 0) return 0;

    require (x &gt;= 0);

    uint256 lo = (uint256 (x) * (y &amp; 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) &gt;&gt; 64;
    uint256 hi = uint256 (x) * (y &gt;&gt; 128);

    require (hi &lt;= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
    hi &lt;&lt;= 64;

    require (hi &lt;=
      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);
    return hi + lo;
  }

  /**
   * Calculate x / y rounding towards zero.  Revert on overflow or when y is
   * zero.
   *
   * @param x signed 64.64-bit fixed point number
   * @param y signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function div (int128 x, int128 y) internal pure returns (int128) {
    require (y != 0);
    int256 result = (int256 (x) &lt;&lt; 64) / y;
    require (result &gt;= MIN_64x64 &amp;&amp; result &lt;= MAX_64x64);
    return int128 (result);
  }

  /**
   * Calculate x / y rounding towards zero, where x and y are signed 256-bit
   * integer numbers.  Revert on overflow or when y is zero.
   *
   * @param x signed 256-bit integer number
   * @param y signed 256-bit integer number
   * @return signed 64.64-bit fixed point number
   */
  function divi (int256 x, int256 y) internal pure returns (int128) {
    require (y != 0);

    bool negativeResult = false;
    if (x &lt; 0) {
      x = -x; // We rely on overflow behavior here
      negativeResult = true;
    }
    if (y &lt; 0) {
      y = -y; // We rely on overflow behavior here
      negativeResult = !negativeResult;
    }
    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));
    if (negativeResult) {
      require (absoluteResult &lt;= 0x80000000000000000000000000000000);
      return -int128 (absoluteResult); // We rely on overflow behavior here
    } else {
      require (absoluteResult &lt;= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
      return int128 (absoluteResult); // We rely on overflow behavior here
    }
  }

  /**
   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit
   * integer numbers.  Revert on overflow or when y is zero.
   *
   * @param x unsigned 256-bit integer number
   * @param y unsigned 256-bit integer number
   * @return signed 64.64-bit fixed point number
   */
  function divu (uint256 x, uint256 y) internal pure returns (int128) {
    require (y != 0);
    uint128 result = divuu (x, y);
    require (result &lt;= uint128 (MAX_64x64));
    return int128 (result);
  }

  /**
   * Calculate -x.  Revert on overflow.
   *
   * @param x signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function neg (int128 x) internal pure returns (int128) {
    require (x != MIN_64x64);
    return -x;
  }

  /**
   * Calculate |x|.  Revert on overflow.
   *
   * @param x signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function abs (int128 x) internal pure returns (int128) {
    require (x != MIN_64x64);
    return x &lt; 0 ? -x : x;
  }

  /**
   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is
   * zero.
   *
   * @param x signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function inv (int128 x) internal pure returns (int128) {
    require (x != 0);
    int256 result = int256 (0x100000000000000000000000000000000) / x;
    require (result &gt;= MIN_64x64 &amp;&amp; result &lt;= MAX_64x64);
    return int128 (result);
  }

  /**
   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.
   *
   * @param x signed 64.64-bit fixed point number
   * @param y signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function avg (int128 x, int128 y) internal pure returns (int128) {
    return int128 ((int256 (x) + int256 (y)) &gt;&gt; 1);
  }

  /**
   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.
   * Revert on overflow or in case x * y is negative.
   *
   * @param x signed 64.64-bit fixed point number
   * @param y signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function gavg (int128 x, int128 y) internal pure returns (int128) {
    int256 m = int256 (x) * int256 (y);
    require (m &gt;= 0);
    require (m &lt;
        0x4000000000000000000000000000000000000000000000000000000000000000);
    return int128 (sqrtu (uint256 (m), uint256 (x) + uint256 (y) &gt;&gt; 1));
  }

  /**
   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number
   * and y is unsigned 256-bit integer number.  Revert on overflow.
   *
   * @param x signed 64.64-bit fixed point number
   * @param y uint256 value
   * @return signed 64.64-bit fixed point number
   */
  function pow (int128 x, uint256 y) internal pure returns (int128) {
    uint256 absoluteResult;
    bool negativeResult = false;
    if (x &gt;= 0) {
      absoluteResult = powu (uint256 (x) &lt;&lt; 63, y);
    } else {
      // We rely on overflow behavior here
      absoluteResult = powu (uint256 (uint128 (-x)) &lt;&lt; 63, y);
      negativeResult = y &amp; 1 &gt; 0;
    }

    absoluteResult &gt;&gt;= 63;

    if (negativeResult) {
      require (absoluteResult &lt;= 0x80000000000000000000000000000000);
      return -int128 (absoluteResult); // We rely on overflow behavior here
    } else {
      require (absoluteResult &lt;= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
      return int128 (absoluteResult); // We rely on overflow behavior here
    }
  }

  /**
   * Calculate sqrt (x) rounding down.  Revert if x &lt; 0.
   *
   * @param x signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function sqrt (int128 x) internal pure returns (int128) {
    require (x &gt;= 0);
    return int128 (sqrtu (uint256 (x) &lt;&lt; 64, 0x10000000000000000));
  }

  /**
   * Calculate binary logarithm of x.  Revert if x &lt;= 0.
   *
   * @param x signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function log_2 (int128 x) internal pure returns (int128) {
    require (x &gt; 0);

    int128 a = 0;
    int128 b = 126;
    while (a &lt; b) {
      int128 m = a + b &gt;&gt; 1;
      int128 t = x &gt;&gt; m;
      if (t == 0) b = m - 1;
      else if (t &gt; 1) a = m + 1;
      else {
        a = m;
        break;
      }
    }

    int128 result = a - 64 &lt;&lt; 64;
    uint256 ux = uint256 (x) &lt;&lt; 127 - a;
    for (int128 bit = 0x8000000000000000; bit &gt; 0; bit &gt;&gt;= 1) {
      ux *= ux;
      if (ux &gt;=
        0x8000000000000000000000000000000000000000000000000000000000000000) {
        ux &gt;&gt;= 128;
        result += bit;
      } else ux &gt;&gt;= 127;
    }

    return result;
  }

  /**
   * Calculate natural logarithm of x.  Revert if x &lt;= 0.
   *
   * @param x signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function ln (int128 x) internal pure returns (int128) {
    require (x &gt; 0);

    return int128 (
        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF &gt;&gt; 128);
  }

  /**
   * Calculate binary exponent of x.  Revert on overflow.
   *
   * @param x signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function exp_2 (int128 x) internal pure returns (int128) {
    require (x &lt; 0x400000000000000000); // Overflow

    if (x &lt; -0x400000000000000000) return 0; // Underflow

    uint256 result = 0x80000000000000000000000000000000;

    if (x &amp; 0x8000000000000000 &gt; 0)
      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E &gt;&gt; 128;
    if (x &amp; 0x4000000000000000 &gt; 0)
      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC &gt;&gt; 128;
    if (x &amp; 0x2000000000000000 &gt; 0)
      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F &gt;&gt; 128;
    if (x &amp; 0x1000000000000000 &gt; 0)
      result = result * 0x10B5586CF9890F6298B92B71842A98363 &gt;&gt; 128;
    if (x &amp; 0x800000000000000 &gt; 0)
      result = result * 0x1059B0D31585743AE7C548EB68CA417FD &gt;&gt; 128;
    if (x &amp; 0x400000000000000 &gt; 0)
      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 &gt;&gt; 128;
    if (x &amp; 0x200000000000000 &gt; 0)
      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F &gt;&gt; 128;
    if (x &amp; 0x100000000000000 &gt; 0)
      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 &gt;&gt; 128;
    if (x &amp; 0x80000000000000 &gt; 0)
      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B &gt;&gt; 128;
    if (x &amp; 0x40000000000000 &gt; 0)
      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F &gt;&gt; 128;
    if (x &amp; 0x20000000000000 &gt; 0)
      result = result * 0x100162F3904051FA128BCA9C55C31E5DF &gt;&gt; 128;
    if (x &amp; 0x10000000000000 &gt; 0)
      result = result * 0x1000B175EFFDC76BA38E31671CA939725 &gt;&gt; 128;
    if (x &amp; 0x8000000000000 &gt; 0)
      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D &gt;&gt; 128;
    if (x &amp; 0x4000000000000 &gt; 0)
      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 &gt;&gt; 128;
    if (x &amp; 0x2000000000000 &gt; 0)
      result = result * 0x1000162E525EE054754457D5995292026 &gt;&gt; 128;
    if (x &amp; 0x1000000000000 &gt; 0)
      result = result * 0x10000B17255775C040618BF4A4ADE83FC &gt;&gt; 128;
    if (x &amp; 0x800000000000 &gt; 0)
      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB &gt;&gt; 128;
    if (x &amp; 0x400000000000 &gt; 0)
      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 &gt;&gt; 128;
    if (x &amp; 0x200000000000 &gt; 0)
      result = result * 0x10000162E43F4F831060E02D839A9D16D &gt;&gt; 128;
    if (x &amp; 0x100000000000 &gt; 0)
      result = result * 0x100000B1721BCFC99D9F890EA06911763 &gt;&gt; 128;
    if (x &amp; 0x80000000000 &gt; 0)
      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 &gt;&gt; 128;
    if (x &amp; 0x40000000000 &gt; 0)
      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B &gt;&gt; 128;
    if (x &amp; 0x20000000000 &gt; 0)
      result = result * 0x100000162E430E5A18F6119E3C02282A5 &gt;&gt; 128;
    if (x &amp; 0x10000000000 &gt; 0)
      result = result * 0x1000000B1721835514B86E6D96EFD1BFE &gt;&gt; 128;
    if (x &amp; 0x8000000000 &gt; 0)
      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF &gt;&gt; 128;
    if (x &amp; 0x4000000000 &gt; 0)
      result = result * 0x10000002C5C8601CC6B9E94213C72737A &gt;&gt; 128;
    if (x &amp; 0x2000000000 &gt; 0)
      result = result * 0x1000000162E42FFF037DF38AA2B219F06 &gt;&gt; 128;
    if (x &amp; 0x1000000000 &gt; 0)
      result = result * 0x10000000B17217FBA9C739AA5819F44F9 &gt;&gt; 128;
    if (x &amp; 0x800000000 &gt; 0)
      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 &gt;&gt; 128;
    if (x &amp; 0x400000000 &gt; 0)
      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 &gt;&gt; 128;
    if (x &amp; 0x200000000 &gt; 0)
      result = result * 0x10000000162E42FF0999CE3541B9FFFCF &gt;&gt; 128;
    if (x &amp; 0x100000000 &gt; 0)
      result = result * 0x100000000B17217F80F4EF5AADDA45554 &gt;&gt; 128;
    if (x &amp; 0x80000000 &gt; 0)
      result = result * 0x10000000058B90BFBF8479BD5A81B51AD &gt;&gt; 128;
    if (x &amp; 0x40000000 &gt; 0)
      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC &gt;&gt; 128;
    if (x &amp; 0x20000000 &gt; 0)
      result = result * 0x100000000162E42FEFB2FED257559BDAA &gt;&gt; 128;
    if (x &amp; 0x10000000 &gt; 0)
      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE &gt;&gt; 128;
    if (x &amp; 0x8000000 &gt; 0)
      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE &gt;&gt; 128;
    if (x &amp; 0x4000000 &gt; 0)
      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D &gt;&gt; 128;
    if (x &amp; 0x2000000 &gt; 0)
      result = result * 0x1000000000162E42FEFA494F1478FDE05 &gt;&gt; 128;
    if (x &amp; 0x1000000 &gt; 0)
      result = result * 0x10000000000B17217F7D20CF927C8E94C &gt;&gt; 128;
    if (x &amp; 0x800000 &gt; 0)
      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D &gt;&gt; 128;
    if (x &amp; 0x400000 &gt; 0)
      result = result * 0x100000000002C5C85FDF477B662B26945 &gt;&gt; 128;
    if (x &amp; 0x200000 &gt; 0)
      result = result * 0x10000000000162E42FEFA3AE53369388C &gt;&gt; 128;
    if (x &amp; 0x100000 &gt; 0)
      result = result * 0x100000000000B17217F7D1D351A389D40 &gt;&gt; 128;
    if (x &amp; 0x80000 &gt; 0)
      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE &gt;&gt; 128;
    if (x &amp; 0x40000 &gt; 0)
      result = result * 0x1000000000002C5C85FDF4741BEA6E77E &gt;&gt; 128;
    if (x &amp; 0x20000 &gt; 0)
      result = result * 0x100000000000162E42FEFA39FE95583C2 &gt;&gt; 128;
    if (x &amp; 0x10000 &gt; 0)
      result = result * 0x1000000000000B17217F7D1CFB72B45E1 &gt;&gt; 128;
    if (x &amp; 0x8000 &gt; 0)
      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 &gt;&gt; 128;
    if (x &amp; 0x4000 &gt; 0)
      result = result * 0x10000000000002C5C85FDF473E242EA38 &gt;&gt; 128;
    if (x &amp; 0x2000 &gt; 0)
      result = result * 0x1000000000000162E42FEFA39F02B772C &gt;&gt; 128;
    if (x &amp; 0x1000 &gt; 0)
      result = result * 0x10000000000000B17217F7D1CF7D83C1A &gt;&gt; 128;
    if (x &amp; 0x800 &gt; 0)
      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E &gt;&gt; 128;
    if (x &amp; 0x400 &gt; 0)
      result = result * 0x100000000000002C5C85FDF473DEA871F &gt;&gt; 128;
    if (x &amp; 0x200 &gt; 0)
      result = result * 0x10000000000000162E42FEFA39EF44D91 &gt;&gt; 128;
    if (x &amp; 0x100 &gt; 0)
      result = result * 0x100000000000000B17217F7D1CF79E949 &gt;&gt; 128;
    if (x &amp; 0x80 &gt; 0)
      result = result * 0x10000000000000058B90BFBE8E7BCE544 &gt;&gt; 128;
    if (x &amp; 0x40 &gt; 0)
      result = result * 0x1000000000000002C5C85FDF473DE6ECA &gt;&gt; 128;
    if (x &amp; 0x20 &gt; 0)
      result = result * 0x100000000000000162E42FEFA39EF366F &gt;&gt; 128;
    if (x &amp; 0x10 &gt; 0)
      result = result * 0x1000000000000000B17217F7D1CF79AFA &gt;&gt; 128;
    if (x &amp; 0x8 &gt; 0)
      result = result * 0x100000000000000058B90BFBE8E7BCD6D &gt;&gt; 128;
    if (x &amp; 0x4 &gt; 0)
      result = result * 0x10000000000000002C5C85FDF473DE6B2 &gt;&gt; 128;
    if (x &amp; 0x2 &gt; 0)
      result = result * 0x1000000000000000162E42FEFA39EF358 &gt;&gt; 128;
    if (x &amp; 0x1 &gt; 0)
      result = result * 0x10000000000000000B17217F7D1CF79AB &gt;&gt; 128;

    result &gt;&gt;= 63 - (x &gt;&gt; 64);
    require (result &lt;= uint256 (MAX_64x64));

    return int128 (result);
  }

  /**
   * Calculate natural exponent of x.  Revert on overflow.
   *
   * @param x signed 64.64-bit fixed point number
   * @return signed 64.64-bit fixed point number
   */
  function exp (int128 x) internal pure returns (int128) {
    require (x &lt; 0x400000000000000000); // Overflow

    if (x &lt; -0x400000000000000000) return 0; // Underflow

    return exp_2 (
        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 &gt;&gt; 128));
  }

  /**
   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit
   * integer numbers.  Revert on overflow or when y is zero.
   *
   * @param x unsigned 256-bit integer number
   * @param y unsigned 256-bit integer number
   * @return unsigned 64.64-bit fixed point number
   */
  function divuu (uint256 x, uint256 y) private pure returns (uint128) {
    require (y != 0);

    uint256 result;

    if (x &lt;= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
      result = (x &lt;&lt; 64) / y;
    else {
      uint256 a = 192;
      uint256 b = 255;
      while (a &lt; b) {
        uint256 m = a + b &gt;&gt; 1;
        uint256 t = x &gt;&gt; m;
        if (t == 0) b = m - 1;
        else if (t &gt; 1) a = m + 1;
        else {
          a = m;
          break;
        }
      }

      result = (x &lt;&lt; 255 - a) / ((y - 1 &gt;&gt; a - 191) + 1);
      require (result &lt;= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);

      uint256 hi = result * (y &gt;&gt; 128);
      uint256 lo = result * (y &amp; 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);

      uint256 xh = x &gt;&gt; 192;
      uint256 xl = x &lt;&lt; 64;

      if (xl &lt; lo) xh -= 1;
      xl -= lo; // We rely on overflow behavior here
      lo = hi &lt;&lt; 128;
      if (xl &lt; lo) xh -= 1;
      xl -= lo; // We rely on overflow behavior here

      assert (xh == hi &gt;&gt; 128);

      result += xl / y;
    }

    require (result &lt;= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
    return uint128 (result);
  }

  /**
   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point
   * number and y is unsigned 256-bit integer number.  Revert on overflow.
   *
   * @param x unsigned 129.127-bit fixed point number
   * @param y uint256 value
   * @return unsigned 129.127-bit fixed point number
   */
  function powu (uint256 x, uint256 y) private pure returns (uint256) {
    if (y == 0) return 0x80000000000000000000000000000000;
    else if (x == 0) return 0;
    else {
      uint256 a = 0;
      uint256 b = 255;
      while (a &lt; b) {
        uint256 m = a + b &gt;&gt; 1;
        uint256 t = x &gt;&gt; m;
        if (t == 0) b = m - 1;
        else if (t &gt; 1) a = m + 1;
        else {
          a = m;
          break;
        }
      }

      int256 xe = int256 (a) - 127;
      if (xe &gt; 0) x &gt;&gt;= xe;
      else x &lt;&lt;= -xe;

      uint256 result = 0x80000000000000000000000000000000;
      int256 re = 0;

      while (y &gt; 0) {
        if (y &amp; 1 &gt; 0) {
          result = result * x;
          y -= 1;
          re += xe;
          if (result &gt;=
            0x8000000000000000000000000000000000000000000000000000000000000000) {
            result &gt;&gt;= 128;
            re += 1;
          } else result &gt;&gt;= 127;
          if (re &lt; -127) return 0; // Underflow
          require (re &lt; 128); // Overflow
        } else {
          x = x * x;
          y &gt;&gt;= 1;
          xe &lt;&lt;= 1;
          if (x &gt;=
            0x8000000000000000000000000000000000000000000000000000000000000000) {
            x &gt;&gt;= 128;
            xe += 1;
          } else x &gt;&gt;= 127;
          if (xe &lt; -127) return 0; // Underflow
          require (xe &lt; 128); // Overflow
        }
      }

      if (re &gt; 0) result &lt;&lt;= re;
      else if (re &lt; 0) result &gt;&gt;= -re;

      return result;
    }
  }

  /**
   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer
   * number.
   *
   * @param x unsigned 256-bit integer number
   * @return unsigned 128-bit integer number
   */
  function sqrtu (uint256 x, uint256 r) private pure returns (uint128) {
    if (x == 0) return 0;
    else {
      require (r &gt; 0);
      while (true) {
        uint256 rr = x / r;
        if (r == rr || r + 1 == rr) return uint128 (r);
        else if (r == rr + 1) return uint128 (rr);
        r = r + rr + 1 &gt;&gt; 1;
      }
    }
  }
}
</pre></body></html>Ztext/plainUUTF-8_bhttps://raw.githubusercontent.com/abdk-consulting/abdk-libraries-solidity/master/ABDKMath64x64.solP    ( : P n } c`ckcqcÖ                           c×